<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - weichen's note</title><link>https://droyuki.github.io/posts/</link><description>所有文章 | weichen's note</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><managingEditor>droyuki@gmail.com (weichen)</managingEditor><webMaster>droyuki@gmail.com (weichen)</webMaster><lastBuildDate>Sat, 10 Jun 2023 12:06:35 +0800</lastBuildDate><atom:link href="https://droyuki.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>透過 Pod SNAT 節省 EKS IP 資源</title><link>https://droyuki.github.io/2023/06/eks-nodegroup-in-private-snet/</link><pubDate>Sat, 10 Jun 2023 12:06:35 +0800</pubDate><author>weichen</author><guid>https://droyuki.github.io/2023/06/eks-nodegroup-in-private-snet/</guid><description>前情提要 繼上次發現 EKS Pods 會佔用 ENI 後，為了解決這個問題，我新增另一組 Private IP 和 VPC 關聯，再透過 Private NAT Gateway 做一層轉換，如此就可以讓所有 EKS Pod 透過同一個 Intranet IP 和地</description></item><item><title>EKS Nodegroup IP 的配發原理</title><link>https://droyuki.github.io/2023/05/eks-nodegroup-ip-allocation/</link><pubDate>Wed, 24 May 2023 20:32:58 +0800</pubDate><author>weichen</author><guid>https://droyuki.github.io/2023/05/eks-nodegroup-ip-allocation/</guid><description>前情提要 觀察了一下 AWS IP 的使用情況，發現 EKS Node 是耗用 IP 的一大元兇，查了些資料順手記錄一下。 從 EKS node group 中，挑一台 EC2 Instance 查看 IP 資訊 1. 透過 eksctl 查看 Node Group 資訊 1</description></item><item><title>IP Calculator</title><link>https://droyuki.github.io/2023/05/ip-calculator/</link><pubDate>Sun, 14 May 2023 16:56:13 +0800</pubDate><author>weichen</author><guid>https://droyuki.github.io/2023/05/ip-calculator/</guid><description> Subnetting IP Subnet Calculator . . . / Calculate Count : Range : Standard Class :</description></item><item><title>如何以 kubeadm 快速建立 K8s 叢集</title><link>https://droyuki.github.io/2023/05/k8s-installation/</link><pubDate>Tue, 09 May 2023 23:36:07 +0800</pubDate><author>weichen</author><guid>https://droyuki.github.io/2023/05/k8s-installation/</guid><description><![CDATA[Prerequisites 1. Edit /etc/hosts (all nodes) 1 2 3 4 10.10.10.166 master01-dev 10.10.10.167 master02-dev 10.10.10.168 master03-dev 10.10.10.169 vip.kube.dev 2. Enable bridge traffic 1 2 3 4 5 6 7 8 9 cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf br_netfilter EOF cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF sudo sysctl --system 3. Enable VIP binding 1 2 3 4 5 sysctl -w net.ipv4.ip_nonlocal_bind=1 echo net.ipv4.ip_nonlocal_bind=1 &gt;&gt;]]></description></item><item><title>Kubernetes 資源調度與使用量限制</title><link>https://droyuki.github.io/2021/05/eks-resources-config/</link><pubDate>Wed, 26 May 2021 20:32:58 +0800</pubDate><author>weichen</author><guid>https://droyuki.github.io/2021/05/eks-resources-config/</guid><description>Requests、Limits、LimitRange、ResourceQuota、QoS、Eviction Requests 與 Limits 當節點資源不夠時，沒有設定 requests</description></item><item><title>React 單元測試 - Test Was Not Wrap in Act ?</title><link>https://droyuki.github.io/2020/05/react-test-was-not-wrap-in-act/</link><pubDate>Wed, 06 May 2020 14:36:54 +0800</pubDate><author>weichen</author><guid>https://droyuki.github.io/2020/05/react-test-was-not-wrap-in-act/</guid><description>Warning: An update to Demo inside a test was not wrapped in act(&amp;hellip;). 最近在寫單元測試，遇到這個神奇的 warning，記錄一下。 情境: 假設有一個元件，點了會更新 state 並呼叫 props.onChange class 版: 1 2 3 4</description></item><item><title>透過 redux-thunk 處理非同步 action</title><link>https://droyuki.github.io/2020/01/redux-thunk-async-action/</link><pubDate>Fri, 17 Jan 2020 16:06:01 +0800</pubDate><author>weichen</author><guid>https://droyuki.github.io/2020/01/redux-thunk-async-action/</guid><description>首先必須知道幾個重點 Redux 不會管你是否同步，想要更新 store ，就必須呼叫 dispatch() Redux 原始碼中，dispatch function 的實作是此 function 會回傳其第一個參數 1 2 // 也就是若執</description></item><item><title>React + Redux 常見問題</title><link>https://droyuki.github.io/2020/01/react-redux-faq/</link><pubDate>Fri, 17 Jan 2020 14:51:25 +0800</pubDate><author>weichen</author><guid>https://droyuki.github.io/2020/01/react-redux-faq/</guid><description>React + Redux 常見問題 Q1: Flux Pattern 是什麼? Flux Pattern 是一個單向資料流設計模式，React 中所有元件都建議採用，以單向資料流的概念避免產生 side effect 由 React 渲染出view，</description></item><item><title>JS 繼承(2): constructor 的執行順序</title><link>https://droyuki.github.io/2019/09/js-extends-constructor/</link><pubDate>Wed, 04 Sep 2019 16:57:11 +0800</pubDate><author>weichen</author><guid>https://droyuki.github.io/2019/09/js-extends-constructor/</guid><description>三個 class A, B, C，依序繼承，測試 constructor 的執行關係 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class A { constructor() { console.log(&amp;#39;A has been instantiated&amp;#39;, this) } static color =</description></item><item><title>JS 繼承(1): class property跑去哪了？</title><link>https://droyuki.github.io/2019/09/js-extends-class-property/</link><pubDate>Tue, 03 Sep 2019 16:57:11 +0800</pubDate><author>weichen</author><guid>https://droyuki.github.io/2019/09/js-extends-class-property/</guid><description><![CDATA[探討 JS 繼承的 class property 行為 Class A extends Component 1 2 3 4 5 6 7 8 9 10 11 12 class A extends Component { static color = &#34;red&#34;; counter = 0; arrowOnClick = () =&gt; { console.log(&#34;A arrowOnClick&#34;); } onClick(){ console.log(&#34;A onClick&#34;); } } 經由 Babel 轉譯後，class properties 都會被移到 constructor]]></description></item></channel></rss>